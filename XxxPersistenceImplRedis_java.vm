#checkId($entity)
#parse("include/init_variables.vm")
#parse("include/java_header.vm")
##--------------------------------------------------------------------------------------------------------
#set( $recordClass = "${entity.name}Record" )
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
#set ( $keyFields = $entity.keyAttributes ) 
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder($SRC)};
import java.io.IOException;
import java.util.List;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.demo.data.record.CarRecord;
import org.demo.persistence.CarPersistence;
import org.demo.persistence.impl.redis.commons.GenericDAO;
import javax.inject.Named;

#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end

import ${recordPackage}.${recordClass};
import ${ROOT_PKG}.persistence.${entity.name}Persistence;

@Named("${entity.name}Persistence")
public class ${entity.name}PersistenceImplRedis extends GenericDAO<$recordClass> implements ${entity.name}Persistence {

private final static String SELECT_ALL = "$uncapitalizedEntityName:*";
private final static String entity = "$uncapitalizedEntityName";

	// ----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public ${entity.name}PersistenceImplRedis() {
		super();
	}

// ---------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given
	 * primary value(s)
	 * 
	 * @param id;
	 * @return the new instance
	 */

	@Override
	protected String getSetValuesForId(${recordClass} bean) {
		// TODO Auto-generated method stub
		if (bean != null) {
			return "$uncapitalizedEntityName:" + bean.getId();
		}
		return "";
	}

	// ---------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given
	 * primary value(s)
	 * 
	 * @param id;
	 * @return the new instance
	 */
	private ${recordClass} newInstanceWithPrimaryKey($fn.argumentsListWithWrapperType($keyFields)) {
		${recordClass} $uncapitalizedEntityName = new ${recordClass} ();
        #foreach( $field in $keyFields )
		#set($id = ${field.name});
        #end
		${uncapitalizedEntityName}.setId($id); 
		return $uncapitalizedEntityName;
	}

	// ----------------------------------------------------------------------
	@Override
	protected ${recordClass} newInstance() {
		return new ${recordClass}();
	}

// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public ${recordClass} findById($fn.argumentsListWithWrapperType($keyFields)){
		#foreach( $field in $keyFields )
		#set($id = ${field.name})
        #end
		${recordClass}  $uncapitalizedEntityName = newInstanceWithPrimaryKey($id);

		return super.doSelect($uncapitalizedEntityName);
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public List<${recordClass}> findAll() {
	
		return super.doSelectAll();
	}

	// ----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s)
	 * in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from
	 * the database<br>
	 * If not found, the given instance remains unchanged
	 */
	public ${recordClass} load(${recordClass} $uncapitalizedEntityName) {
		return super.doSelect($uncapitalizedEntityName);
	}

	// ----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database
	 * 
	 */
	public String insert(${recordClass} $uncapitalizedEntityName){
		#if ( $entity.hasAutoIncrementedKey() )
		return super.doInsertIncr($uncapitalizedEntityName);
		#else
		return super.doInsert($uncapitalizedEntityName);
		#end
	}

// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public ${recordClass} save(${recordClass} $uncapitalizedEntityName){

		if (super.doExists($uncapitalizedEntityName)) {
			super.doUpdate($uncapitalizedEntityName);
		} else {
			insert($uncapitalizedEntityName);
		}
		return $uncapitalizedEntityName;
	}

// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean update(${recordClass} $uncapitalizedEntityName){

		String r = super.doUpdate($uncapitalizedEntityName);
		return r.equals("OK");
	}

	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public ${recordClass} create(${recordClass} $uncapitalizedEntityName){

		insert($uncapitalizedEntityName);
		return $uncapitalizedEntityName;
	}


	// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean deleteById($fn.argumentsListWithWrapperType($keyFields)) {
       #foreach( $field in $keyFields )
		#set($id = ${field.name})
        #end
		${recordClass} $uncapitalizedEntityName = newInstanceWithPrimaryKey($id);
		long r = super.doDelete($uncapitalizedEntityName);
		return r > 0L;
	}

// ----------------------------------------------------------------------
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean delete(${recordClass} $uncapitalizedEntityName) {

		long r = super.doDelete($uncapitalizedEntityName);
		return r > 0L;
	}


	// ----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary
	 * key value(s)
	 
	 * @return
	 */
	// @Override
	public boolean exists($fn.argumentsListWithWrapperType($keyFields)) {
		#foreach( $field in $keyFields )
		#set($id = ${field.name})
        #end
		${recordClass} $uncapitalizedEntityName = newInstanceWithPrimaryKey($id);
		return super.doExists($uncapitalizedEntityName);
	}
// ----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database
	
	 * @return
	 */
	// @Override
	public boolean exists(${recordClass} $uncapitalizedEntityName) {
		return super.doExists($uncapitalizedEntityName);
	}

	// ----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * 
	 * @return
	 */
	// @Override
	public long count() {
		return super.doCountAll();
	}

    @Override
	protected String getSelectAll() {
		return SELECT_ALL;
	}

	@Override
	protected String getEntity() {
		return entity;
	}
	@Override
	protected void setBeanId(${recordClass} $uncapitalizedEntityName, $fn.argumentsListWithWrapperType($keyFields)) {
       #foreach( $field in $keyFields )
		#set($id = ${field.name})
        #end
		${uncapitalizedEntityName}.setId((int) $id);
	}



}
