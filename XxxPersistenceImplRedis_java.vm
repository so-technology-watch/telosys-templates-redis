#checkId($entity)
#parse("include/init_variables.vm")
#parse("include/java_header.vm")
##--------------------------------------------------------------------------------------------------------
#set( $recordClass = "${entity.name}Record" )
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
#set ( $keyFields = $entity.keyAttributes ) 
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder($SRC)};
import java.util.List;

import javax.inject.Named;
import org.demo.persistence.impl.redis.commons.GenericDAO;

#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end

import ${recordPackage}.${recordClass};
import ${ROOT_PKG}.persistence.${entity.name}Persistence;

@Named("${entity.name}Persistence")
public class ${entity.name}PersistenceImplRedis extends GenericDAO<$recordClass> implements ${entity.name}Persistence {

	/**
	 * DAO constructor
	 */
	public ${entity.name}PersistenceImplRedis() {
				super("$uncapitalizedEntityName", ${recordClass}.class);
	}

	/**
	 * make key in a good format
	 * 
	 * @param bean;
	 * @return key  with a good format
	 */
	@Override
	protected String getKey(${recordClass} bean) {
#foreach( $field in $keyFields )
#set( $get = ${field.getter}) 
#end
			return "$uncapitalizedEntityName:" + bean.$get();
	}
	/**
	 * Creates a new instance of the bean
	 * primary value(s)
	 * 
	 * @param key;
	 * @return the new instance
	 */
	private ${recordClass} newInstanceWithPrimaryKey($fn.argumentsListWithWrapperType($keyFields)) {
		${recordClass} $uncapitalizedEntityName = new ${recordClass} ();
#foreach( $field in $keyFields )
        ${uncapitalizedEntityName}.${field.setter}(${field.name}); 
#end
		return $uncapitalizedEntityName;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public ${recordClass} findById($fn.argumentsListWithWrapperType($keyFields)){
#foreach( $field in $keyFields )
        ${recordClass}  $uncapitalizedEntityName = newInstanceWithPrimaryKey(${field.name});
#end
	
		return super.doSelect($uncapitalizedEntityName);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public List<${recordClass}> findAll() {
	
		return super.doSelectAll();
	}

	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s)
	 * in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from
	 * the database<br>
	 * If not found, the given instance remains unchanged
	 */
	public ${recordClass} load(${recordClass} $uncapitalizedEntityName) {
		return super.doSelect($uncapitalizedEntityName);
	}

	/**
	 * Inserts the given bean in the database
	 * 
	 */
	public boolean insert(${recordClass} $uncapitalizedEntityName){
#foreach( $field in $keyFields )
#if ($field.isAutoIncremented())
    if(${uncapitalizedEntityName}.${field.getter}() != null)
		return super.doInsert($uncapitalizedEntityName);
    else
		return super.doInsertIncr($uncapitalizedEntityName);
#else
		return super.doInsert($uncapitalizedEntityName);
#end
#end
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public ${recordClass} save(${recordClass} $uncapitalizedEntityName){
		if (super.doExists($uncapitalizedEntityName)) {
			super.doUpdate($uncapitalizedEntityName);
		} else {
			insert($uncapitalizedEntityName);
		}
        return $uncapitalizedEntityName;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean update(${recordClass} $uncapitalizedEntityName){
		return super.doUpdate($uncapitalizedEntityName);	
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public ${recordClass} create(${recordClass} $uncapitalizedEntityName){
		insert($uncapitalizedEntityName);
		return $uncapitalizedEntityName;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean deleteById($fn.argumentsListWithWrapperType($keyFields)) {
#foreach( $field in $keyFields )
		${recordClass} $uncapitalizedEntityName = newInstanceWithPrimaryKey($field.name);
#end
		long r = super.doDelete($uncapitalizedEntityName);
		return r > 0L;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interface
	 */
	public boolean delete(${recordClass} $uncapitalizedEntityName) {
		long r = super.doDelete($uncapitalizedEntityName);
		return r > 0L;
	}

	/**
	 * Checks the existence of a record in the database using the given primary
	 * key value(s)
	 
	 * @return
	 */
	public boolean exists($fn.argumentsListWithWrapperType($keyFields)) {
#foreach( $field in $keyFields )
		${recordClass} $uncapitalizedEntityName = newInstanceWithPrimaryKey($field.name);
#end
		
		return super.doExists($uncapitalizedEntityName);
	}

	/**
	 * Checks the existence of the given bean in the database
	
	 * @return
	 */
	public boolean exists(${recordClass} $uncapitalizedEntityName) {
		return super.doExists($uncapitalizedEntityName);
	}

	/**
	 * Counts all the records present in the database
	 * 
	 * @return
	 */
	public long count() {
		return super.doCountAll();
	}

	@Override
	protected void setBeanId(${recordClass} $uncapitalizedEntityName, $fn.argumentsListWithWrapperType($keyFields)) {
#foreach( $field in $keyFields )
			${uncapitalizedEntityName}.${field.setter}((int) $field.name);
#end
	}



}
