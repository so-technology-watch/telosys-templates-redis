/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.codehaus.jackson.map.ObjectMapper;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.ScanParams;
import redis.clients.jedis.ScanResult;
import redis.clients.jedis.exceptions.JedisException;

/**
 * Generic abstract class for basic REDIS DAO
 * 
 * @author telosys
 *
 * @param <T>
 */
public abstract class GenericDAO<T> {


	private Class<T> type;
	private String entity;
	private String select_all;
	private ObjectMapper mapper = new ObjectMapper();
	
    @SuppressWarnings({ "unchecked", "rawtypes" })
	protected GenericDAO(String entity, Class type, String select_all) {
		this.entity = entity;
		this.type = type;
		this.select_all = select_all;
	}


	/**
	 * calculate a redis key for given bean
	 * 
	 * @return the redis key format for given bean 
	 */
	protected abstract String getSetValuesForId(T bean);

	/**
	 * Get connection to Redis
	 * @return Connection to Redis by Jedis pool
	 */
	private JedisPool getConnection() {
		return ClientProvider.getJedisInstance();
	}

	/**
	 * Loads the given bean from the database using its primary key The given
	 * 
	 * @param bean
	 * @return bean if found and loaded, null if not found
	 */
	protected T doSelect(T bean) {
		try (Jedis jedis = getConnection().getResource()) {
			String id = getSetValuesForId(bean);
			if (!jedis.exists(id)) {
				throw new RuntimeException("this id doesn't exist");
			}
			String beanAsJson = jedis.get(id);
			return (T) mapper.readValue(beanAsJson, type);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * Returns all the occurrences existing in the database
	 * 
	 * @return
	 */
	protected List<T> doSelectAll() {
		try (Jedis jedis = getConnection().getResource()) {
			List<T> list = new LinkedList<T>();
			List<String> keys = getAllKeys();
			for (String key : keys) {
				String beanAsJson = jedis.get(key);
				T bean = (T) mapper.readValue(beanAsJson, type);
				list.add(bean);
			}
			return list;
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * Inserts the given bean in the database (Redis)
	 * 
	 * @param bean
	 */
	protected boolean doInsertIncr(T bean) {
		try (Jedis jedis = getConnection().getResource()) {
			long nextId = autoIncr();
			setBeanId(bean, (int) nextId);
			String id = getSetValuesForId(bean);
			while (jedis.exists(id)) {
				nextId = autoIncr();
				setBeanId(bean, (int) nextId);
				id = getSetValuesForId(bean);
			}
			String beanAsJson = mapper.writeValueAsString(bean);
			String result = jedis.set(id, beanAsJson);
			return "OK".equals(result);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * Inserts the given bean in the database (Redis)
	 * 
	 * @param bean
	 * @return Indicates if the insert is successful
	 */
	protected boolean doInsert(T bean) {
		try (Jedis jedis = getConnection().getResource()) {
			String id = getSetValuesForId(bean);
			if (jedis.exists(id)) {
				throw new RuntimeException("this bean already exist");
			}
			String beanAsJson = mapper.writeValueAsString(bean);
			String result = jedis.set(id, beanAsJson);
			return "OK".equals(result);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}

	}

	/**
	 * Updates the given bean in the database (Redis)
	 * 
	 * @param bean
	 * @return the Redis return code (i.e. the row count affected by the UPDATE
	 */
	protected boolean doUpdate(T bean) {
		try (Jedis jedis = getConnection().getResource()) {
			String id = getSetValuesForId(bean);
			if (!jedis.exists(id)) {
				throw new RuntimeException("this bean doesn't exist");
			}
			String beanAsJson = mapper.writeValueAsString(bean);
			String result = jedis.set(id, beanAsJson);
			return "OK".equals(result);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * Deletes the given bean in the database (Redis)
	 * 
	 * @param bean
	 * @return the Redis return code (i.e. the row count affected by the DELETE
	 *         operation : 0 or 1 )
	 */
	protected long doDelete(T bean) {
		try (Jedis jedis = getConnection().getResource()) {
			String id = getSetValuesForId(bean);
			if (!jedis.exists(id)) {
				throw new RuntimeException("this bean doesn't exist");
			}
			return jedis.del(id);
		} catch (JedisException e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * Checks if the given bean exists in the database
	 * 
	 * @param bean
	 * @return
	 */
	protected boolean doExists(T bean) {
		try (Jedis jedis = getConnection().getResource()) {
			String id = getSetValuesForId(bean);
			return jedis.exists(id);
		} catch (JedisException e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * Counts all the occurrences in the table
	 * 
	 * @return
	 */
	protected int doCountAll() {
			
		return getAllKeys().size();
	}

	/**
	 * calcul the next value of id
	 * 
	 * @return
	 */
	protected long autoIncr() {
		long result = 1L;
		try (Jedis jedis = getConnection().getResource()) {
			if (jedis.get(entity) != null) {
				result = jedis.incr(entity);
				return result;
			}
			jedis.set(entity, "1");
			return result;
		} catch (JedisException e) {
			throw new RuntimeException(e);
		}
	}

	protected abstract void setBeanId(T bean, Integer id);

	/**
	 * Returns all keys existing in the database
	 * 
	 * @return
	 */
	private List<String> getAllKeys() {
		try (Jedis jedis = getConnection().getResource()) {
			ScanParams params = new ScanParams();
			params.match(select_all);
			String cursor = redis.clients.jedis.ScanParams.SCAN_POINTER_START;
			boolean cycleIsFinished = false;
			List<String> results = new ArrayList<String>();
			while (!cycleIsFinished) {
				ScanResult<String> scanResult = jedis.scan(cursor, params);
				List<String> result = scanResult.getResult();
				for (String res : result) {
					results.add(res);
				}
				cursor = scanResult.getStringCursor();
				if (cursor.equals("0")) {
					cycleIsFinished = true;
				}
			}
			return results;
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}



}
